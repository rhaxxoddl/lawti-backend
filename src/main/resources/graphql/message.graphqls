extend type Query {
    #    법안 메세지 방 목록을 반환하는 메서드
    #    - input: 필터 옵션
    #    [Usage]
    #    query queryBillDetail(input: BillId!) {
    #    queryBillDetail(input: BillId!) {
    #       id
    #       title
    #       currentStage
    #       summary
    #       proposers
    #       proposerDate
    #       committe
    #       noticeEndDate
    #       committeDate
    #       plenaryResult
    #       plenaryProcessingDage
    #       billPdfUri
    #       alternativeBill
    #   }
    #}
    queryMessageRoomList(input: BillMessageRoomListInput!): BillMessageRoomListDto!

    #    해당 법안의 메세지들을 반환하는 메서드
    #   - input: 법안 id
    #   - return: 모든 메세지
    #    [Usage]
    #    query queryBillPdfUri(input: BillId!) {
    #    queryBillPdfUri(input: BillId!) {
    #       billPdfUri: String
    #   }
    #}
    queryMessageList(input: BillMessageListInput!): BillMessageListDto!
}

extend type Mutation {
    #    법안을 unfollow하고 메세지 방을 나가는 메서드
    #   - input: 팔로우할 법안들 id의 배열
    #   - return: 팔로우하고 있는 법안들 id의 배열
    #    [Usage]
    #    mutation followBills(input: BillsInput!) {
    #    followBills(input: BillsInput!) {
    #       billPdfUri: String
    #   }
    #}
    exitMessageRoom(input: ExitBillMessageRoomListInput!): BillMessageRoomListDto!
}

input BillMessageRoomListInput {
    pagination: TargetSlicePaginationInput!
}

input BillMessageListInput {
    billId: Long!
    pagination: TargetSlicePaginationInput!
}

input ExitBillMessageRoomListInput {
    list: [BillInput]!
}

type BillMessageRoomListDto {
    list: [BillMessageRoomDto]!
    pagination: SlicePaginationDto!
}

type BillMessageRoomDto {
    tag: TagDto
    title: String
    numberOfUnreadMessages: Long
    latestMessageContent: String
}

type BillMessageListDto {
    list: [MessageDto]!
    pagination: SlicePaginationDto!
}

type MessageDto {
    messageId: Long!
    messageText: String!
    isRead: Boolean!
}
